"""
Django settings for libriscan project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os

from pathlib import Path
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# A directory for local storage. Expected to be mapped to a Docker volume.
# Any files that need to survive a container restart should live here.
LOCAL_DIR = BASE_DIR / "mnt"

# Load env variables from the .env file in the mounted directory
load_dotenv(dotenv_path=LOCAL_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("LB_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("LB_DEBUG", False)

ALLOWED_HOSTS = os.environ.get("LB_ALLOWED_HOSTS", "127.0.0.1").split(",")
CSRF_TRUSTED_ORIGINS = os.environ.get("LB_TRUSTED_ORIGINS", "http://localhost").split(
    ","
)
SESSION_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = not DEBUG

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "biblios",
    "localflavor",
    "django_htmx",
    "huey.contrib.djhuey",
    "rules",
    "simple_history",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.LoginRequiredMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
]

ROOT_URLCONF = "libriscan.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "libriscan.wsgi.application"


# Email Settings
# Not all of these are necessarily required, depending on your SMPT setup.
EMAIL_HOST = os.environ.get("LB_EMAIL_HOST", None)
EMAIL_PORT = os.environ.get("LB_EMAIL_PORT", None)
EMAIL_HOST_USER = os.environ.get("LB_EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD = os.environ.get("LB_EMAIL_HOST_PASSWORD", None)
EMAIL_USE_TLS = os.environ.get("LB_EMAIL_USE_TLS", None)
EMAIL_USE_SSL = os.environ.get("LB_EMAIL_USE_SSL", None)
EMAIL_TIMEOUT = os.environ.get("LB_EMAIL_TIMEOUT", None)
# If these are used, they should be file paths
EMAIL_SSL_KEYFILE = os.environ.get("LB_EMAIL_SSL_KEYFILE", None)
EMAIL_SSL_CERTFILE = os.environ.get("LB_EMAIL_CERTFILE", None)


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": LOCAL_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Logging
# https://docs.djangoproject.com/en/5.2/topics/logging/

# Configure INFO logging as default, but can override with this env variable
log_level = os.getenv("DJANGO_LOG_LEVEL", "INFO")

# Make sure the logging folder exists, or else we get a FileNotFoundError
if not os.path.exists(LOCAL_DIR / "logs/"):
    os.makedirs(LOCAL_DIR / "logs")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "{asctime} {levelname} {name} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": log_level,
            "class": "logging.handlers.RotatingFileHandler",
            "maxBytes": 5242880,
            "backupCount": 10,
            "filename": LOCAL_DIR / "logs/libriscan.log",
            "formatter": "standard",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": log_level,
            "propagate": True,
        },
    },
}

# Task queuing
HUEY = {
    "name": "libriscan",
    "huey_class": "huey.SqliteHuey",
    "filename": LOCAL_DIR / "task_queue.db",
    "immediate": False,
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = os.environ.get("TZ", "UTC")

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = LOCAL_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "biblios.User"

AUTHENTICATION_BACKENDS = (
    "rules.permissions.ObjectPermissionBackend",
    "django.contrib.auth.backends.ModelBackend",
)

LOGIN_URL = "/login"
LOGIN_REDIRECT_URL = "/"

MEDIA_ROOT = LOCAL_DIR / "images"
MEDIA_URL = "images/"

LOGOUT_REDIRECT_URL = "/"

# File upload settings
ALLOWED_UPLOAD_TYPES = ["image/tiff", "image/jpeg", "image/png"]
MAX_UPLOAD_SIZE = 5 * 1024 * 1024  # 5 MB
